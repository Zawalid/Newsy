generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?    @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    Newsletter    Newsletter[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Newsletter {
    id        String    @id @default(cuid())
    email     String
    rssUrl    String?
    isActive  Boolean   @default(true)
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime  @default(now())
    Article   Article[]

    @@map("newsletters")
}

model Article {
    id           String     @id @default(cuid())
    title        String
    content      String
    newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
    newsletterId String
    savedAt      DateTime   @default(now())

    @@map("articles")
}
